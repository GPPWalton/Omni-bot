<?xml version="1.0"?>
<robot xmlns:xacro="http://www.ros.org/wiki/xacro" name="omni">

<gazebo>
  <plugin name="gazebo_ros_control" filename="libgazebo_ros_control.so">
    <robotNamespace>/omni</robotNamespace>
  </plugin>
</gazebo>
<xacro:property name="wb_w" value="0.18"/>
<xacro:property name="wb_h" value="0.005"/>
<xacro:property name="wb_d" value="0.18"/>
<xacro:property name="wb_m" value="0.23"/>

<xacro:property name="ct_w" value="${wb_w/1.21}"/>
<xacro:property name="ct_h" value="${wb_h}"/>
<xacro:property name="ct_d" value="${wb_d/1.51}"/>
<xacro:property name="ct_m" value="${((ct_w*ct_d)/(wb_w*wb_d))*wb_m}"/>

<xacro:property name="camera_link" value="0.05" /> <!-- Size of square 'camera' box -->

<xacro:property name="p_r" value="0.0025"/>
<xacro:property name="p_l" value="0.0515"/>
<xacro:property name="p_m" value="0.032"/>

<xacro:property name="w_r" value="0.0251"/>
<xacro:property name="w_l" value="0.024"/>
<xacro:property name="w_m" value="0.60"/>

<xacro:property name="b_r" value="0.024"/>
<xacro:property name="b_m" value="0.60"/>

<xacro:macro name="wb_inertial" params="mass depth width height">
  <inertial>
    <mass value="${mass}"/>
    <inertia 
              ixx="${(1/12)*mass*(width+height)}" 
              ixy="0.0" 
              ixz="0.0" 
              iyy="${(1/12)*mass*(depth+height)}" 
              iyz="0.0" 
              izz="${(1/12)*mass*(width+depth)}" />
  </inertial>
</xacro:macro>

<xacro:macro name="wb_dim" params="depth width height">
  <geometry>
    <box size="${depth} ${width} ${height}"/>
  </geometry>
</xacro:macro>

<xacro:macro name="support_gen" params="name">
  <link name= "support_${name}">
    <visual>
      <xacro:wheel_dim length="${p_l}" radius="${p_r}"/>
    </visual>
    <collision>
      <xacro:wheel_dim length="${p_l}" radius="${p_r}"/>
    </collision>
    <xacro:wheel_inertia mass="${p_m}" length="${p_l*p_l}" radius="${p_r*p_r}" />
  </link>
</xacro:macro>

<xacro:macro name="wheel_dim" params="length radius">
  <geometry>
    <cylinder length = "${length}" radius = "${radius}"/>
  </geometry>
</xacro:macro>
<xacro:macro name="wheel_inertia" params="mass length radius">
  <inertial>
    <mass value="${mass}"/>
      <inertia ixx="${(1/12)*mass*((3*radius+length))}"
               ixy="0.0"
               ixz="0.0"
               iyy="${(1/12)*mass*((3*radius+length))}"
               iyz="0.0"
               izz="${(1/2)*mass*radius}"/>
    </inertial>
</xacro:macro>

<xacro:macro name="b_dim" params="radius">
  <geometry>
    <sphere radius = "${radius}"/>
  </geometry>
</xacro:macro>

<xacro:macro name="b_inertia" params="mass radius">
  <inertial>
    <mass value="${mass}"/>
      <inertia ixx="${(2/5)*mass*radius}"
               ixy="0.0"
               ixz="0.0"
               iyy="${(2/5)*mass*radius}"
               iyz="0.0"
               izz="${(2/5)*mass*radius}"/>
    </inertial>
</xacro:macro>

  <link name = "wheel_base">
    <visual>
      <xacro:wb_dim depth="${wb_d}" width="${wb_w}" height="${wb_h}"/>
    </visual>
    <collision>
      <xacro:wb_dim depth="${wb_d}" width="${wb_w}" height="${wb_h}"/>
    </collision>
    <xacro:wb_inertial mass="${wb_m}" depth="${wb_d*wb_d}" width="${wb_w*wb_w}" height="${wb_h*wb_h}"/>
  </link>

  <link name="cam_tier">
    <visual>
      <xacro:wb_dim depth="${ct_d}" width="${ct_w}" height="${ct_h}"/>
    </visual>
    <collision>
      <xacro:wb_dim depth="${ct_d}" width="${ct_w}" height="${ct_h}"/>
    </collision>
    <xacro:wb_inertial mass="${wb_m}" depth="${ct_d*ct_d}" width="${ct_w*ct_w}" height="${ct_h*ct_h}"/>
  </link>

  <!-- Camera -->
  <link name="cam">
    <visual>
      <origin xyz="0 0 0" rpy="0 0 0"/>
      <geometry>
        <box size="${camera_link} ${camera_link} ${camera_link}"/>
      </geometry>
      <material name="red"/>
    </visual>

    <collision>
      <origin xyz="0 0 0" rpy="0 0 0"/>
      <geometry>
        <box size="${camera_link} ${camera_link} ${camera_link}"/>
      </geometry>
    </collision>
   <xacro:wb_inertial mass="1e-5" depth="${camera_link}" width="${camera_link}" height="${camera_link}"/>
  </link>

  <xacro:support_gen name="lf"/>
  <xacro:support_gen name="lr"/>
  <xacro:support_gen name="rf"/>
  <xacro:support_gen name="rr"/>

  <link name = "left_wheel">
    <visual>
      <xacro:wheel_dim length="${w_l}" radius="${w_r}"/>
    </visual>
    <collision>
      <xacro:wheel_dim length="${w_l}" radius="${w_r}"/>
    </collision>
    <xacro:wheel_inertia mass="${w_m}" length="${w_l*w_l}" radius="${w_r*w_r}" />
  </link>

  <link name = "right_wheel">
    <visual>
      <xacro:wheel_dim length="${w_l}" radius="${w_r}"/>
    </visual>
    <collision>
      <xacro:wheel_dim length="${w_l}" radius="${w_r}"/>
    </collision>
    <xacro:wheel_inertia mass="${w_m}" length="${w_l*w_l}" radius="${w_r*w_r}" />
  </link>

  <link name = "bearing_front">
    <visual>
      <xacro:b_dim radius="${b_r}"/>
    </visual>
    <collision>
      <xacro:b_dim radius="${b_r}"/>
    </collision>
    <xacro:b_inertia mass="${b_m}" radius="${b_r*b_r}"/>
  </link>

  <link name = "bearing_rear">
    <visual>
     <xacro:b_dim radius="${b_r}"/>
    </visual>
    <collision>
      <xacro:b_dim radius="${b_r}"/>
    </collision>
    <xacro:b_inertia mass="${b_m}" radius="${b_r*b_r}"/>
  </link>

  <joint name = "wb_lw_joint" type = "continuous">
    <parent link = "wheel_base"/>
    <child link= "left_wheel"/>
    <axis xyz = "0 0 1"/>
    <origin rpy="0 1.57075 1.57075" xyz="0 ${(wb_w/2)+(w_l/2)} 0"/>
    <dynamics friction="14.595"/>
    <limit effort="1000.0" velocity="3.12928"/>
  </joint>
  
  <joint name = "wb_rw_joint" type = "continuous">
    <parent link = "wheel_base"/>
    <child link= "right_wheel"/>
    <axis xyz = "0 0 1"/>
    <origin rpy="0 1.57075 1.57075" xyz="0 -${(wb_w/2)+(w_l/2)} 0"/>
    <dynamics friction="14.595"/>
    <limit effort="1000.0" velocity="3.12928"/>
  </joint>
  
  <joint name = "wb_bf_joint" type = "fixed">
    <parent link = "wheel_base"/>
    <child link= "bearing_front"/>
    <origin rpy="0 0 0" xyz="${(wb_w/2)+(w_l/2)} 0 0"/>
  </joint>

  <joint name = "wb_br_joint" type = "fixed">
    <parent link = "wheel_base"/>
    <child link= "bearing_rear"/>
    <origin rpy="0 0 0" xyz="-${(wb_w/2)+(w_l/2)} 0 0"/>
  </joint>

  <joint name="slf_wb_joint" type ="fixed">
    <parent link = "wheel_base"/>
    <child link= "support_lf"/>
    <origin rpy="0 0 0" xyz="${ct_w/1.77/2} ${ct_d/1.77/2} ${(wb_h/2)+(p_l/2)}"/>
  </joint>

  <joint name="slr_wb_joint" type ="fixed">
    <parent link = "wheel_base"/>
    <child link= "support_lr"/>
    <origin rpy="0 0 0" xyz="${ct_w/1.77/2} -${ct_d/1.77/2} ${(wb_h/2)+(p_l/2)}"/>
  </joint>

  <joint name="srf_wb_joint" type ="fixed">
    <parent link = "wheel_base"/>
    <child link= "support_rf"/>
    <origin rpy="0 0 0" xyz="${-ct_w/1.77/2} ${ct_d/1.77/2} ${(wb_h/2)+(p_l/2)}"/>
  </joint>

  <joint name="srr_wb_joint" type ="fixed">
    <parent link = "wheel_base"/>
    <child link= "support_rr"/>
    <origin rpy="0 0 0" xyz="-${ct_w/1.77/2} -${ct_d/1.77/2} ${(wb_h/2)+(p_l/2)}"/>
  </joint>

  <joint name="ct_wb_joint" type="fixed">
    <parent link = "wheel_base"/>
    <child link= "cam_tier"/>
    <origin rpy="0 0 0" xyz="0 0 ${wb_h+p_l}"/>
  </joint>

  <joint name="camera_joint" type="fixed">
    <parent link="wheel_base"/>
    <child link="cam"/>
    <axis xyz="0 1 0" />
    <origin xyz="0 0 ${2*wb_h+p_l+(camera_link/2)}" rpy="0 0 0"/>
  </joint>

  <transmission name="trans_left">
		<type>transmission_interface/SimpleTransmission</type>
		<joint name="wb_lw_joint">
			<hardwareInterface>hardware_interface/VelocityJointInterface</hardwareInterface>
		</joint>
		<actuator name="left_wheel">
			<mechanicalReduction>1</mechanicalReduction>
			<hardwareInterface>hardware_interface/VelocityJointInterface</hardwareInterface>
		</actuator>
	</transmission>
  
  <transmission name="trans_right">
		<type>transmission_interface/SimpleTransmission</type>
		<joint name="wb_rw_joint">
			<hardwareInterface>hardware_interface/VelocityJointInterface</hardwareInterface>
		</joint>
		<actuator name="right_wheel">
			<mechanicalReduction>1</mechanicalReduction>
			<hardwareInterface>hardware_interface/VelocityJointInterface</hardwareInterface>
		</actuator>
	</transmission>

  <gazebo reference="cam">
    <sensor name="camera" type="wideanglecamera">
      <camera>
        <horizontal_fov>6.283</horizontal_fov>
        <image>
          <width>320</width>
          <height>240</height>
        </image>
        <clip>
          <near>0.1</near>
          <far>100</far>
        </clip>
        <!-- A new section named `lens`. -->
        <lens>
          <!-- type element is mandatory -->
          <type>custom</type>
          <!-- manually defined mapping function r = c1*f*fun(theta/c2 + c3) -->
          <!-- More information here: https://en.wikipedia.org/wiki/Fisheye_lens#Mapping_function -->
          <custom_function>
            <c1>1.05</c1>
            <!-- linear scaling -->
            <c2>4</c2>
            <!-- angle scaling -->
            <f>1.0</f>
            <!-- one more scaling parameter -->
            <fun>tan</fun>
            <!-- one of sin,tan,id -->
          </custom_function>
          <!-- if it is set to `true` your horizontal FOV will ramain as defined -->
          <!-- othervise it depends on lens type and custom function, if there is one -->
          <scale_to_hfov>true</scale_to_hfov>
          <!-- clip everything that is outside of this angle -->
          <cutoff_angle>3.1415</cutoff_angle>
          <!-- resolution of the cubemap texture, the highter it is - the sharper is your image -->
          <env_texture_size>512</env_texture_size>
        </lens>
        <always_on>1</always_on>
        <update_rate>30</update_rate>
      </camera>
      <plugin name="camera_controller" filename="libgazebo_ros_camera.so">
        <alwaysOn>true</alwaysOn>
        <updateRate>0.0</updateRate>
        <cameraName>camera1</cameraName>
        <imageTopicName>image_raw</imageTopicName>
        <cameraInfoTopicName>camera_info</cameraInfoTopicName>
        <frameName>camera_link</frameName>
        <hackBaseline>0.07</hackBaseline>
        <distortionK1>0.0</distortionK1>
        <distortionK2>0.0</distortionK2>
        <distortionK3>0.0</distortionK3>
        <distortionT1>0.0</distortionT1>
        <distortionT2>0.0</distortionT2>
      </plugin>
    </sensor>
  </gazebo>
</robot>
